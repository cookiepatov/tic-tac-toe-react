{"version":3,"sources":["index.js"],"names":["Square","props","className","btnClass","onClick","value","Board","i","winningLine","this","includes","squares","n","items","rows","Array","fill","elements","map","row","push","renderSquare","entries","index","React","Component","Game","state","xIsNext","history","stepNumber","stepHistory","sortDown","draw","slice","length","winner","calculateWinner","stepCoords","Math","floor","cell","getStepCoords","setState","calculateWinningLine","concat","step","status","current","moves","move","desc","jumpTo","reverse","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23a9e371.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square(props) {\r\n    return (<button className={props.btnClass}  onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n        const winningLine=this.props.winningLine;\r\n        const btnClass=(winningLine&&(winningLine.includes(i)))?'square square_highlight':'square'\r\n      return <Square \r\n        value={this.props.squares[i]}\r\n        onClick={()=> this.props.onClick(i)}\r\n        key={i}\r\n        btnClass={btnClass}\r\n        />;\r\n    }\r\n  \r\n    render() {\r\n        let n=0;\r\n        const items = []\r\n        const rows = new Array(3);\r\n        rows.fill();\r\n        const elements=rows.map(row=>{\r\n            row=[];\r\n            for(let i=0;i<3;i++){\r\n                row.push(this.renderSquare(n))\r\n                n++;\r\n            }\r\n            return row;\r\n        })\r\n        \r\n        for (const [index, value] of elements.entries()) {\r\n          items.push(<div key={index} className=\"board-row\">\r\n              {value}\r\n          </div>)\r\n        }\r\n        return (\r\n          <div>\r\n            {items}\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true,\r\n            history: [{squares: Array(9).fill(null)}],\r\n            stepNumber: 0,\r\n            stepHistory: ['Начало игры'],\r\n            sortDown: true,\r\n            winningLine: [],\r\n            draw: false,\r\n        };\r\n    }\r\n    handleClick(i) { \r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        const winner = calculateWinner(squares);\r\n        const stepHistory = this.state.stepHistory.slice();\r\n        const stepCoords = getStepCoords(i);\r\n        stepHistory[this.state.stepNumber + 1] = stepCoords;\r\n        if(winner||squares[i]!==null) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X': 'O';\r\n        if(!squares.includes(null)){\r\n            this.setState({draw:true})\r\n        }\r\n        this.setState({winningLine:calculateWinningLine(squares)});\r\n        this.setState({history: history.concat([{squares: squares}])});\r\n        this.setState({xIsNext: !this.state.xIsNext});\r\n        this.setState({stepNumber: history.length});\r\n        this.setState({stepHistory: stepHistory});\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n    render() {\r\n        let status;\r\n        const history = this.state.history.slice();\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        let moves = history.map((step, move)=>{\r\n            const className = this.state.stepNumber===move?'button_highlight':''\r\n            const desc = move ? `Перейти к ходу №${move}` : `Перейти в начало игры`\r\n            return (\r\n            <li key={move}>\r\n                <button className={className} onClick={()=>{this.jumpTo(move)}}>{desc}</button>\r\n                <span className='history'>\r\n                    {this.state.stepHistory[move]}\r\n                </span>\r\n            </li>\r\n            )\r\n        });\r\n        if(!this.state.sortDown){moves=moves.reverse()}\r\n        if(winner) {\r\n          status = `Winner is: ${winner}`;\r\n        } else  if (this.state.draw){ \r\n            status = `Ничья`;\r\n        } \r\n        else{\r\n          status = `Next player: ${this.state.xIsNext ? 'X': 'O'}`;\r\n        }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board squares={current.squares} onClick={(i) => this.handleClick(i)} winningLine={this.state.winningLine}/>\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button onClick={()=>this.setState({sortDown:!this.state.sortDown})}className=\"button-sort\">Изменить сортировку</button>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function calculateWinningLine(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return lines[i];\r\n          }\r\n        \r\n  }\r\n  return null;\r\n}\r\n\r\n  function getStepCoords(i) {\r\n      const row = Math.floor((i)/3)+1;\r\n      const cell = (i+1) - ((row -1)*3)\r\n    return `Ряд: ${row}, клетка: ${cell}`\r\n  }"],"sourceRoot":""}